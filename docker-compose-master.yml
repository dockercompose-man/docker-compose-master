------------------------------------------------------------------------------------
Vanilla-Forums
------------------------------------------------------------------------------------

clone this repo into vanilla-forums directory
https://github.com/stevenli6186/vanilla-forums-docker-container
------------------------------------------------------------------------------------
docker-compose.yml
------------------------------------------------------------------------------------
version: '3'

services:
  vanilla-forums:
    image: vanillaforums
    build:
      context:  ./src
    container_name: vanilla-forums
    restart: always
    volumes:
      - "./data:/var/www/html/upload"
    ports:
      - 80:80
    environment:
      - DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - db
    env_file:
      - .env
  db:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
     - "./data:/var/lib/mysql"
------------------------------------------------------------------------------------
.env
------------------------------------------------------------------------------------
VANILLA_DB_HOST=
DB_ROOT_PASSWORD=
DB_NAME=
DB_USER=
DB_PASSWORD=

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------
Adminer - https://hub.docker.com/_/adminer
------------------------------------------------------------------------------------
docker-compose.yml
------------------------------------------------------------------------------------
version: '3.1'

services:

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  db:
    image: mysql:8
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
     - "./data:/var/lib/mysql"
------------------------------------------------------------------------------------
.env
------------------------------------------------------------------------------------
ADMINER_DB_HOST=
DB_ROOT_PASSWORD=
DB_NAME=
DB_USER=
DB_PASSWORD=
------------------------------------------------------------------------------------
Paperless-ngx - https://github.com/paperless-ngx/paperless-ngx
When it's running 'docker compose run --rm webserver createsuperuser' to create a user.
------------------------------------------------------------------------------------
docker-compose.yml
------------------------------------------------------------------------------------
# docker-compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this docker-compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker-compose pull'.
# - Run 'docker-compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker-compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

version: "3.4"
services:
  broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - "./redisdata:/data"
  db:
    image: docker.io/library/mariadb:10
    restart: unless-stopped
    volumes:
      - "./dbdata:/var/lib/mysql"
    environment:
      MARIADB_HOST: ${DB_HOST}
      MARIADB_DATABASE: ${DB_NAME}
      MARIADB_USER: ${DB_USER}
      MARIADB_PASSWORD: ${DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    env_file:
      - .env
    ports:
      - 3306:3306
  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - db
      - broker
      - gotenberg
      - tika
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "./data:/usr/src/paperless/data"
      - "./media:/usr/src/paperless/media"
      - "./export:/usr/src/paperless/export"
      - "/media/paperless/consume:/usr/src/paperless/consume"
    env_file: .env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBENGINE: mariadb
      PAPERLESS_DBHOST: db
      PAPERLESS_DBUSER: ${DB_USER}
      PAPERLESS_DBPASS: ${DB_PASSWORD}
      PAPERLESS_DBPORT: 3306
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
  gotenberg:
    image: docker.io/gotenberg/gotenberg:7.6
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
  tika:
    image: ghcr.io/paperless-ngx/tika:latest
    restart: unless-stopped

volumes:
  data:
  media:
  dbdata:
  redisdata:
------------------------------------------------------------------------------------
.env
------------------------------------------------------------------------------------
NAME=paperless
PAPERLESS_URL=https://paperless.yourdomain.com
#PAPERLESS_ALLOWED_HOSTS=*
USERMAP_GID=1001
PAPERLESS_TIME_ZONE=America/New_York
PAPERLESS_OCR_LANGUAGE=eng
PAPERLESS_SECRET_KEY=
ALLOWED_HOSTS=localmachine_ip
DB_HOST=localmachine_ip
DB_ROOT_PASSWORD=
DB_NAME=paperless
DB_USER=paperless
DB_PASSWORD=
------------------------------------------------------------------------------------
Scrutiny - https://github.com/AnalogJ/scrutiny
use to scan for drives and get proper name 'smartctl --scan'
------------------------------------------------------------------------------------
docker-compose.yml
------------------------------------------------------------------------------------
version: '3.5'

services:
  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    ports:
      - "8080:8080" # webapp
      - "8086:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - ./config:/opt/scrutiny/config
      - ./influxdb:/opt/scrutiny/influxdb
    devices:
      - "/dev/nvme0"
      - "/dev/sdb"
      - "/dev/nvme1"
      - "/dev/sda"
      - "/dev/sdn"
      - "/dev/sdk"
      - "/dev/sdd"
      - "/dev/sdg"
      - "/dev/sdf"
      - "/dev/sdh"
      - "/dev/sdi"
      - "/dev/sdo"
      - "/dev/sdj"
      - "/dev/sdl"
      - "/dev/sde"
      - "/dev/sdm"
      - "/dev/sdp"
      - "/dev/sdq"
------------------------------------------------------------------------------------
collector.yaml
------------------------------------------------------------------------------------
# Commented Scrutiny Configuration File
#
# The default location for this file is /opt/scrutiny/config/collector.yaml.
# In some cases to improve clarity default values are specified,
# uncommented. Other example values are commented out.
#
# When this file is parsed by Scrutiny, all configuration file keys are
# lowercased automatically. As such, Configuration keys are case-insensitive,
# and should be lowercase in this file to be consistent with usage.


######################################################################
# Version
#
# version specifies the version of this configuration file schema, not
# the scrutiny binary. There is only 1 version available at the moment
version: 1

# The host id is a label used for identifying groups of disks running on the same host
# Primiarly used for hub/spoke deployments (can be left empty if using all-in-one image).
host:
  id: ""


# This block allows you to override/customize the settings for devices detected by
# Scrutiny via `smartctl --scan`
# See the "--device=TYPE" section of https://linux.die.net/man/8/smartctl
# type can be a 'string' or a 'list'
devices:
#  # example for forcing device type detection for a single disk
  - device: /dev/sdh
    type: 'sat'
  - device: /dev/sdi
    type: 'sat'
  - device: /dev/sdk
    type: 'sat'
  - device: /dev/sdj
    type: 'sat'
##ones above can't be found
  - device: /dev/sdk
    type: 'sat'
  - device: /dev/sdl
    type: 'sat'
  - device: /dev/sdm
    type: 'sat'
  - device: /dev/sdn
    type: 'sat'
  - device: /dev/sdo
    type: 'sat'
  - device: /dev/sdp
    type: 'sat'
  - device: /dev/sdq
    type: 'sat'


#
#  # example to show how to ignore a specific disk/device.
#  - device: /dev/sda
#    ignore: true
#
#  # examples showing how to force smartctl to detect disks inside a raid array/virtual disk
#  - device: /dev/bus/0
#    type:
#      - megaraid,14
#      - megaraid,15
#      - megaraid,18
#      - megaraid,19
#      - megaraid,20
#      - megaraid,21
#
#  - device: /dev/twa0
#    type:
#      - 3ware,0
#      - 3ware,1
#      - 3ware,2
#      - 3ware,3
#      - 3ware,4
#      - 3ware,5
#
#  # example to show how to override the smartctl command args (per device), see below for how to override these global>#  - device: /dev/sda
#    commands:
#      metrics_info_args: '--info --json -T permissive' # used to determine device unique ID & register device with Scr>#      metrics_smart_args: '--xall --json -T permissive' # used to retrieve smart data for each device.


#log:
#  file: '' #absolute or relative paths allowed, eg. web.log
#  level: INFO
#
#api:
#  endpoint: 'https://hdd.orangefarm.ca/web/dashboard'
#  endpoint: 'http://localhost:8080/custombasepath'
# if you need to use a custom base path (for a reverse proxy), you can add a suffix to the endpoint.
#  See docs/TROUBLESHOOTING_REVERSE_PROXY.md for more info,

# example to show how to override the smartctl command args globally
#commands:
#  metrics_smartctl_bin: 'smartctl' # change to provide custom `smartctl` binary path, eg. `/usr/sbin/smartctl`
#  metrics_scan_args: '--scan --json' # used to detect devices
#  metrics_info_args: '--info --json' # used to determine device unique ID & register device with Scrutiny
#  metrics_smart_args: '--xall --json' # used to retrieve smart data for each device.


######################################################################################################################### FEATURES COMING SOON
#
# The following commented out sections are a preview of additional configuration options that will be available soon.
#
########################################################################################################################
#collect:
#  long:
#    enable: false
#    command: ''
#  short:
#    enable: false
#    command: ''
------------------------------------------------------------------------------------
scrutiny.yaml
------------------------------------------------------------------------------------
# Commented Scrutiny Configuration File
#
# The default location for this file is /opt/scrutiny/config/scrutiny.yaml.
# In some cases to improve clarity default values are specified,
# uncommented. Other example values are commented out.
#
# When this file is parsed by Scrutiny, all configuration file keys are
# lowercased automatically. As such, Configuration keys are case-insensitive,
# and should be lowercase in this file to be consistent with usage.


######################################################################
# Version
#
# version specifies the version of this configuration file schema, not
# the scrutiny binary. There is only 1 version available at the moment
version: 1

web:
  listen:
    port: 8080
    host: 0.0.0.0

    # if you're using a reverse proxy like apache/nginx, you can override this value to serve scrutiny on a subpath.
    # eg. http://example.com/scrutiny/* vs http://example.com:8080
    # see docs/TROUBLESHOOTING_REVERSE_PROXY.md
    # basepath: `/scrutiny`
    # leave empty unless behind a path prefixed proxy
    basepath: ''
  database:
    # can also set absolute path here
    location: /opt/scrutiny/config/scrutiny.db
  src:
    # the location on the filesystem where scrutiny javascript + css is located
    frontend:
      path: /opt/scrutiny/web

  # if you're running influxdb on a different host (or using a cloud-provider) you'll need to update the host & port be>  # token, org, bucket are unnecessary for a new InfluxDB installation, as Scrutiny will automatically run the InfluxDB>  # and store the information in the config file. If you 're re-using an existing influxdb installation, you'll need to>  # the `token`
  influxdb:
#    scheme: 'http'
    host: 0.0.0.0
    port: 8086
#    token: 'my-token'
#    org: 'my-org'
#    bucket: 'bucket'
    retention_policy: true

log:
  file: '' #absolute or relative paths allowed, eg. web.log
  level: INFO


# Notification "urls" look like the following. For more information about service specific configuration see
# Shoutrrr's documentation: https://containrrr.dev/shoutrrr/services/overview/

#notify:
#  urls:
#    - "discord://token@channel"
#    - "telegram://token@telegram?channels=channel-1[,channel-2,...]"
#    - "pushover://shoutrrr:apiToken@userKey/?priority=1&devices=device1[,device2, ...]"
#    - "slack://[botname@]token-a/token-b/token-c"
#    - "smtp://username:password@host:port/?fromAddress=fromAddress&toAddresses=recipient1[,recipient2,...]"
#    - "teams://token-a/token-b/token-c"
#    - "gotify://gotify-host/token"
#    - "pushbullet://api-token[/device/#channel/email]"
#    - "ifttt://key/?events=event1[,event2,...]&value1=value1&value2=value2&value3=value3"
#    - "mattermost://[username@]mattermost-host/token[/channel]"
#    - "hangouts://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&token=baz"
#    - "zulip://bot-mail:bot-key@zulip-domain/?stream=name-or-id&topic=name"
#    - "join://shoutrrr:api-key@join/?devices=device1[,device2, ...][&icon=icon][&title=title]"
#    - "script:///file/path/on/disk"
#    - "https://www.example.com/path"

######################################################################################################################### FEATURES COMING SOON
#
# The following commented out sections are a preview of additional configuration options that will be available soon.
#
########################################################################################################################
#limits:
#  ata:
#    critical:
#      error: 10
#    standard:
#      error: 20
#      warn: 10
#  scsi:
#    critical: true
#    standard: true
#  nvme:
#    critical: true
#    standard: true
------------------------------------------------------------------------------------
Invoice Ninja - https://github.com/invoiceninja/dockerfiles
------------------------------------------------------------------------------------
docker-compose.yml
------------------------------------------------------------------------------------
version: '3.7'

services:
  server:
    image: nginx
    restart: always
    env_file: env
    volumes:
      # Vhost configuration
      #- ./config/caddy/Caddyfile:/etc/caddy/Caddyfiledocker-com
      - ./config/nginx/in-vhost.conf:/etc/nginx/conf.d/in-vhost.conf:ro
      - ./docker/app/public:/var/www/app/public:ro
    depends_on:
      - app
    # Run webserver nginx on port 80
    # Feel free to modify depending what port is already occupied
    ports:
      - "80:80"
      - "443:443"
    networks:
      - invoiceninja
    extra_hosts:
      - "in5.localhost:192.168.0.124 " #host and ip

  app:
    image: invoiceninja/invoiceninja:5
    env_file: env
    restart: always
    volumes:
      - ./config/hosts:/etc/hosts:ro
      - ./docker/app/public:/var/www/app/public:rw,delegated
      - ./docker/app/storage:/var/www/app/storage:rw,delegated
    depends_on:
      - db
    networks:
      - invoiceninja
    extra_hosts:
      - "in5.localhost:192.168.0.124 " #host and ip

  db:
    image: mysql:8
#    When running on ARM64 use MariaDB instead of MySQL
#    image: mariadb:10.4
#    For auto DB backups comment out image and use the build block below
#    build:
#      context: ./config/mysql
    ports:
      - "3306:3306"
    restart: always
    env_file: env
    volumes:
      - ./docker/mysql/data:/var/lib/mysql:rw,delegated

      # remove comments for next 4 lines if you want auto sql backups
      #- ./docker/mysql/bak:/backups:rw
      #- ./config/mysql/backup-script:/etc/cron.daily/daily:ro
      #- ./config/mysql/backup-script:/etc/cron.weekly/weekly:ro
      #- ./config/mysql/backup-script:/etc/cron.monthly/monthly:ro
    networks:
      - invoiceninja
    extra_hosts:
      - "in5.localhost:192.168.0.124 " #host and ip

  # THIS IS ONLY A VALID CONFIGURATION FOR IN 4. DO NOT USE FOR IN 5.
  # cron:
  #   image: invoiceninja/invoiceninja:alpine-4
  #   volumes:
      # - ./docker/app/public:/var/www/app/public:rw,delegated
      # - ./docker/app/storage:/var/www/app/storage:rw,delegated
      # - ./docker/app/public/logo:/var/www/app/public/logo:rw,delegated
  #   entrypoint: |
  #     /bin/sh -c 'sh -s <<EOF
  #     trap "break;exit" SIGHUP SIGINT SIGTERM
  #     sleep 300s
  #     while /bin/true; do
  #       ./artisan ninja:send-invoices
  #       ./artisan ninja:send-reminders
  #       sleep 1d
  #     done
  #     EOF'
  #   networks:
  #     - invoiceninja
  #

networks:
  invoiceninja:  
------------------------------------------------------------------------------------
.env
------------------------------------------------------------------------------------
# IN application vars
APP_URL=https://invoice.yourdomain.com
APP_KEY=
APP_DEBUG=false
REQUIRE_HTTPS=false
PHANTOMJS_PDF_GENERATION=false
PDF_GENERATOR=snappdf
TRUSTED_PROXIES='*'


QUEUE_CONNECTION=database

# DB connection
DB_HOST=db
DB_PORT=3306
DB_DATABASE=ninja
DB_USERNAME=ninja
DB_PASSWORD=

# Create initial user
# Default to these values if empty
# IN_USER_EMAIL=admin@example.com
# IN_PASSWORD=changeme!
#IN_USER_EMAIL=
#IN_PASSWORD=

# Mail options
MAIL_MAILER=log
MAIL_HOST=email.com
MAIL_PORT=2525
MAIL_USERNAME=your@email.com
MAIL_PASSWORD=
MAIL_ENCRYPTION=starttls
MAIL_FROM_ADDRESS='your@email.com'
MAIL_FROM_NAME='Invoice Ninja'

# MySQL
MYSQL_ROOT_PASSWORD=
MYSQL_USER=ninja
MYSQL_PASSWORD=
MYSQL_DATABASE=ninja

# V4 env vars
# DB_STRICT=false
# APP_CIPHER=AES-256-CBC
------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------
